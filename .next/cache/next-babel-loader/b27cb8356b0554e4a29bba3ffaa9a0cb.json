{"ast":null,"code":"var _jsxFileName = \"/Users/ducbaonguyen/Desktop/bao/pages/post/[postname].js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Link from 'next/link';\nimport ReactMarkdown from 'react-markdown';\nimport Layout from '../../components/Layout';\nexport var __N_SSG = true;\nexport default function BlogPost(_ref) {\n  var siteTitle = _ref.siteTitle,\n      frontmatter = _ref.frontmatter,\n      markdownBody = _ref.markdownBody;\n  if (!frontmatter) return __jsx(React.Fragment, null);\n  return __jsx(Layout, {\n    pageTitle: \"\".concat(siteTitle, \" | \").concat(frontmatter.title),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 7\n    }\n  }, __jsx(Link, {\n    href: \"/\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 9\n    }\n  }, __jsx(\"a\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 11\n    }\n  }, \"Back to post list\")), __jsx(\"article\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 9\n    }\n  }, __jsx(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 11\n    }\n  }, frontmatter.title), __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 11\n    }\n  }, \"By \", frontmatter.author), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 11\n    }\n  }, __jsx(ReactMarkdown, {\n    source: markdownBody,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 13\n    }\n  }))));\n}\n_c = BlogPost;\n\nvar _c;\n\n$RefreshReg$(_c, \"BlogPost\");","map":{"version":3,"sources":["/Users/ducbaonguyen/Desktop/bao/pages/post/[postname].js"],"names":["Link","ReactMarkdown","Layout","BlogPost","siteTitle","frontmatter","markdownBody","title","author"],"mappings":";;;AAAA,OAAOA,IAAP,MAAiB,WAAjB;AAEA,OAAOC,aAAP,MAA0B,gBAA1B;AAEA,OAAOC,MAAP,MAAmB,yBAAnB;;AAEA,eAAe,SAASC,QAAT,OAA4D;AAAA,MAAxCC,SAAwC,QAAxCA,SAAwC;AAAA,MAA7BC,WAA6B,QAA7BA,WAA6B;AAAA,MAAhBC,YAAgB,QAAhBA,YAAgB;AACzE,MAAI,CAACD,WAAL,EAAkB,OAAO,2BAAP;AAElB,SACI,MAAC,MAAD;AAAQ,IAAA,SAAS,YAAKD,SAAL,gBAAoBC,WAAW,CAACE,KAAhC,CAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,IAAD;AAAM,IAAA,IAAI,EAAC,GAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBADF,CADF,EAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKF,WAAW,CAACE,KAAjB,CADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAOF,WAAW,CAACG,MAAnB,CAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,aAAD;AAAe,IAAA,MAAM,EAAEF,YAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAHF,CAJF,CADJ;AAcD;KAjBuBH,Q","sourcesContent":["import Link from 'next/link'\nimport matter from 'gray-matter'\nimport ReactMarkdown from 'react-markdown'\n\nimport Layout from '../../components/Layout'\n\nexport default function BlogPost({ siteTitle, frontmatter, markdownBody }) {\n  if (!frontmatter) return <></>\n\n  return (\n      <Layout pageTitle={`${siteTitle} | ${frontmatter.title}`}>\n        <Link href=\"/\">\n          <a>Back to post list</a>\n        </Link>\n        <article>\n          <h1>{frontmatter.title}</h1>\n          <p>By {frontmatter.author}</p>\n          <div>\n            <ReactMarkdown source={markdownBody} />\n          </div>\n        </article>\n      </Layout>\n  )\n}\n\nexport async function getStaticProps({ ...ctx }) {\n  const { postname } = ctx.params\n\n  const content = await import(`../../posts/${postname}.md`)\n  const config = await import(`../../siteconfig.json`)\n  const data = matter(content.default)\n\n  return {\n    props: {\n      siteTitle: config.title,\n      frontmatter: data.data,\n      markdownBody: data.content,\n    },\n  }\n}\n\nexport async function getStaticPaths() {\n  const blogSlugs = ((context) => {\n    const keys = context.keys()\n    const data = keys.map((key, index) => {\n      let slug = key.replace(/^.*[\\\\\\/]/, '').slice(0, -3)\n\n      return slug\n    })\n    return data\n  })(require.context('../../posts', true, /\\.md$/))\n\n  const paths = blogSlugs.map((slug) => `/post/${slug}`)\n\n  return {\n    paths,\n    fallback: false,\n  }\n}"]},"metadata":{},"sourceType":"module"}